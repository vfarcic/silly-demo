//*
// Flag evaluation API
//
// This proto forms the basis of a flag-evaluation API.
// It supports single and bulk evaluation RPCs, and flags of various types, as well as establishing a stream for getting notifications about changes in a flag definition.
// It supports the inclusion of a "context" with each evaluation, which may contain arbitrary attributes relevant to flag evaluation.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flagd/evaluation/v1/evaluation.proto

package evaluationv1connect

import (
	v1 "buf.build/gen/go/open-feature/flagd/protocolbuffers/go/flagd/evaluation/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "flagd.evaluation.v1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceResolveAllProcedure is the fully-qualified name of the Service's ResolveAll RPC.
	ServiceResolveAllProcedure = "/flagd.evaluation.v1.Service/ResolveAll"
	// ServiceResolveBooleanProcedure is the fully-qualified name of the Service's ResolveBoolean RPC.
	ServiceResolveBooleanProcedure = "/flagd.evaluation.v1.Service/ResolveBoolean"
	// ServiceResolveStringProcedure is the fully-qualified name of the Service's ResolveString RPC.
	ServiceResolveStringProcedure = "/flagd.evaluation.v1.Service/ResolveString"
	// ServiceResolveFloatProcedure is the fully-qualified name of the Service's ResolveFloat RPC.
	ServiceResolveFloatProcedure = "/flagd.evaluation.v1.Service/ResolveFloat"
	// ServiceResolveIntProcedure is the fully-qualified name of the Service's ResolveInt RPC.
	ServiceResolveIntProcedure = "/flagd.evaluation.v1.Service/ResolveInt"
	// ServiceResolveObjectProcedure is the fully-qualified name of the Service's ResolveObject RPC.
	ServiceResolveObjectProcedure = "/flagd.evaluation.v1.Service/ResolveObject"
	// ServiceEventStreamProcedure is the fully-qualified name of the Service's EventStream RPC.
	ServiceEventStreamProcedure = "/flagd.evaluation.v1.Service/EventStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor              = v1.File_flagd_evaluation_v1_evaluation_proto.Services().ByName("Service")
	serviceResolveAllMethodDescriptor     = serviceServiceDescriptor.Methods().ByName("ResolveAll")
	serviceResolveBooleanMethodDescriptor = serviceServiceDescriptor.Methods().ByName("ResolveBoolean")
	serviceResolveStringMethodDescriptor  = serviceServiceDescriptor.Methods().ByName("ResolveString")
	serviceResolveFloatMethodDescriptor   = serviceServiceDescriptor.Methods().ByName("ResolveFloat")
	serviceResolveIntMethodDescriptor     = serviceServiceDescriptor.Methods().ByName("ResolveInt")
	serviceResolveObjectMethodDescriptor  = serviceServiceDescriptor.Methods().ByName("ResolveObject")
	serviceEventStreamMethodDescriptor    = serviceServiceDescriptor.Methods().ByName("EventStream")
)

// ServiceClient is a client for the flagd.evaluation.v1.Service service.
type ServiceClient interface {
	ResolveAll(context.Context, *connect.Request[v1.ResolveAllRequest]) (*connect.Response[v1.ResolveAllResponse], error)
	ResolveBoolean(context.Context, *connect.Request[v1.ResolveBooleanRequest]) (*connect.Response[v1.ResolveBooleanResponse], error)
	ResolveString(context.Context, *connect.Request[v1.ResolveStringRequest]) (*connect.Response[v1.ResolveStringResponse], error)
	ResolveFloat(context.Context, *connect.Request[v1.ResolveFloatRequest]) (*connect.Response[v1.ResolveFloatResponse], error)
	ResolveInt(context.Context, *connect.Request[v1.ResolveIntRequest]) (*connect.Response[v1.ResolveIntResponse], error)
	ResolveObject(context.Context, *connect.Request[v1.ResolveObjectRequest]) (*connect.Response[v1.ResolveObjectResponse], error)
	EventStream(context.Context, *connect.Request[v1.EventStreamRequest]) (*connect.ServerStreamForClient[v1.EventStreamResponse], error)
}

// NewServiceClient constructs a client for the flagd.evaluation.v1.Service service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		resolveAll: connect.NewClient[v1.ResolveAllRequest, v1.ResolveAllResponse](
			httpClient,
			baseURL+ServiceResolveAllProcedure,
			connect.WithSchema(serviceResolveAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolveBoolean: connect.NewClient[v1.ResolveBooleanRequest, v1.ResolveBooleanResponse](
			httpClient,
			baseURL+ServiceResolveBooleanProcedure,
			connect.WithSchema(serviceResolveBooleanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolveString: connect.NewClient[v1.ResolveStringRequest, v1.ResolveStringResponse](
			httpClient,
			baseURL+ServiceResolveStringProcedure,
			connect.WithSchema(serviceResolveStringMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolveFloat: connect.NewClient[v1.ResolveFloatRequest, v1.ResolveFloatResponse](
			httpClient,
			baseURL+ServiceResolveFloatProcedure,
			connect.WithSchema(serviceResolveFloatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolveInt: connect.NewClient[v1.ResolveIntRequest, v1.ResolveIntResponse](
			httpClient,
			baseURL+ServiceResolveIntProcedure,
			connect.WithSchema(serviceResolveIntMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolveObject: connect.NewClient[v1.ResolveObjectRequest, v1.ResolveObjectResponse](
			httpClient,
			baseURL+ServiceResolveObjectProcedure,
			connect.WithSchema(serviceResolveObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		eventStream: connect.NewClient[v1.EventStreamRequest, v1.EventStreamResponse](
			httpClient,
			baseURL+ServiceEventStreamProcedure,
			connect.WithSchema(serviceEventStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	resolveAll     *connect.Client[v1.ResolveAllRequest, v1.ResolveAllResponse]
	resolveBoolean *connect.Client[v1.ResolveBooleanRequest, v1.ResolveBooleanResponse]
	resolveString  *connect.Client[v1.ResolveStringRequest, v1.ResolveStringResponse]
	resolveFloat   *connect.Client[v1.ResolveFloatRequest, v1.ResolveFloatResponse]
	resolveInt     *connect.Client[v1.ResolveIntRequest, v1.ResolveIntResponse]
	resolveObject  *connect.Client[v1.ResolveObjectRequest, v1.ResolveObjectResponse]
	eventStream    *connect.Client[v1.EventStreamRequest, v1.EventStreamResponse]
}

// ResolveAll calls flagd.evaluation.v1.Service.ResolveAll.
func (c *serviceClient) ResolveAll(ctx context.Context, req *connect.Request[v1.ResolveAllRequest]) (*connect.Response[v1.ResolveAllResponse], error) {
	return c.resolveAll.CallUnary(ctx, req)
}

// ResolveBoolean calls flagd.evaluation.v1.Service.ResolveBoolean.
func (c *serviceClient) ResolveBoolean(ctx context.Context, req *connect.Request[v1.ResolveBooleanRequest]) (*connect.Response[v1.ResolveBooleanResponse], error) {
	return c.resolveBoolean.CallUnary(ctx, req)
}

// ResolveString calls flagd.evaluation.v1.Service.ResolveString.
func (c *serviceClient) ResolveString(ctx context.Context, req *connect.Request[v1.ResolveStringRequest]) (*connect.Response[v1.ResolveStringResponse], error) {
	return c.resolveString.CallUnary(ctx, req)
}

// ResolveFloat calls flagd.evaluation.v1.Service.ResolveFloat.
func (c *serviceClient) ResolveFloat(ctx context.Context, req *connect.Request[v1.ResolveFloatRequest]) (*connect.Response[v1.ResolveFloatResponse], error) {
	return c.resolveFloat.CallUnary(ctx, req)
}

// ResolveInt calls flagd.evaluation.v1.Service.ResolveInt.
func (c *serviceClient) ResolveInt(ctx context.Context, req *connect.Request[v1.ResolveIntRequest]) (*connect.Response[v1.ResolveIntResponse], error) {
	return c.resolveInt.CallUnary(ctx, req)
}

// ResolveObject calls flagd.evaluation.v1.Service.ResolveObject.
func (c *serviceClient) ResolveObject(ctx context.Context, req *connect.Request[v1.ResolveObjectRequest]) (*connect.Response[v1.ResolveObjectResponse], error) {
	return c.resolveObject.CallUnary(ctx, req)
}

// EventStream calls flagd.evaluation.v1.Service.EventStream.
func (c *serviceClient) EventStream(ctx context.Context, req *connect.Request[v1.EventStreamRequest]) (*connect.ServerStreamForClient[v1.EventStreamResponse], error) {
	return c.eventStream.CallServerStream(ctx, req)
}

// ServiceHandler is an implementation of the flagd.evaluation.v1.Service service.
type ServiceHandler interface {
	ResolveAll(context.Context, *connect.Request[v1.ResolveAllRequest]) (*connect.Response[v1.ResolveAllResponse], error)
	ResolveBoolean(context.Context, *connect.Request[v1.ResolveBooleanRequest]) (*connect.Response[v1.ResolveBooleanResponse], error)
	ResolveString(context.Context, *connect.Request[v1.ResolveStringRequest]) (*connect.Response[v1.ResolveStringResponse], error)
	ResolveFloat(context.Context, *connect.Request[v1.ResolveFloatRequest]) (*connect.Response[v1.ResolveFloatResponse], error)
	ResolveInt(context.Context, *connect.Request[v1.ResolveIntRequest]) (*connect.Response[v1.ResolveIntResponse], error)
	ResolveObject(context.Context, *connect.Request[v1.ResolveObjectRequest]) (*connect.Response[v1.ResolveObjectResponse], error)
	EventStream(context.Context, *connect.Request[v1.EventStreamRequest], *connect.ServerStream[v1.EventStreamResponse]) error
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceResolveAllHandler := connect.NewUnaryHandler(
		ServiceResolveAllProcedure,
		svc.ResolveAll,
		connect.WithSchema(serviceResolveAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceResolveBooleanHandler := connect.NewUnaryHandler(
		ServiceResolveBooleanProcedure,
		svc.ResolveBoolean,
		connect.WithSchema(serviceResolveBooleanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceResolveStringHandler := connect.NewUnaryHandler(
		ServiceResolveStringProcedure,
		svc.ResolveString,
		connect.WithSchema(serviceResolveStringMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceResolveFloatHandler := connect.NewUnaryHandler(
		ServiceResolveFloatProcedure,
		svc.ResolveFloat,
		connect.WithSchema(serviceResolveFloatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceResolveIntHandler := connect.NewUnaryHandler(
		ServiceResolveIntProcedure,
		svc.ResolveInt,
		connect.WithSchema(serviceResolveIntMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceResolveObjectHandler := connect.NewUnaryHandler(
		ServiceResolveObjectProcedure,
		svc.ResolveObject,
		connect.WithSchema(serviceResolveObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceEventStreamHandler := connect.NewServerStreamHandler(
		ServiceEventStreamProcedure,
		svc.EventStream,
		connect.WithSchema(serviceEventStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flagd.evaluation.v1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceResolveAllProcedure:
			serviceResolveAllHandler.ServeHTTP(w, r)
		case ServiceResolveBooleanProcedure:
			serviceResolveBooleanHandler.ServeHTTP(w, r)
		case ServiceResolveStringProcedure:
			serviceResolveStringHandler.ServeHTTP(w, r)
		case ServiceResolveFloatProcedure:
			serviceResolveFloatHandler.ServeHTTP(w, r)
		case ServiceResolveIntProcedure:
			serviceResolveIntHandler.ServeHTTP(w, r)
		case ServiceResolveObjectProcedure:
			serviceResolveObjectHandler.ServeHTTP(w, r)
		case ServiceEventStreamProcedure:
			serviceEventStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) ResolveAll(context.Context, *connect.Request[v1.ResolveAllRequest]) (*connect.Response[v1.ResolveAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flagd.evaluation.v1.Service.ResolveAll is not implemented"))
}

func (UnimplementedServiceHandler) ResolveBoolean(context.Context, *connect.Request[v1.ResolveBooleanRequest]) (*connect.Response[v1.ResolveBooleanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flagd.evaluation.v1.Service.ResolveBoolean is not implemented"))
}

func (UnimplementedServiceHandler) ResolveString(context.Context, *connect.Request[v1.ResolveStringRequest]) (*connect.Response[v1.ResolveStringResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flagd.evaluation.v1.Service.ResolveString is not implemented"))
}

func (UnimplementedServiceHandler) ResolveFloat(context.Context, *connect.Request[v1.ResolveFloatRequest]) (*connect.Response[v1.ResolveFloatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flagd.evaluation.v1.Service.ResolveFloat is not implemented"))
}

func (UnimplementedServiceHandler) ResolveInt(context.Context, *connect.Request[v1.ResolveIntRequest]) (*connect.Response[v1.ResolveIntResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flagd.evaluation.v1.Service.ResolveInt is not implemented"))
}

func (UnimplementedServiceHandler) ResolveObject(context.Context, *connect.Request[v1.ResolveObjectRequest]) (*connect.Response[v1.ResolveObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flagd.evaluation.v1.Service.ResolveObject is not implemented"))
}

func (UnimplementedServiceHandler) EventStream(context.Context, *connect.Request[v1.EventStreamRequest], *connect.ServerStream[v1.EventStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flagd.evaluation.v1.Service.EventStream is not implemented"))
}
