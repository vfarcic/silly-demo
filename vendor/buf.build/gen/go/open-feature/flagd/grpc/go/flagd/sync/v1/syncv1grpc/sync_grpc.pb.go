//*
// Flag definition sync API
//
// This proto defines a simple API to synchronize a feature flag definition.
// It supports establishing a stream for getting notifications about changes in a flag definition.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: flagd/sync/v1/sync.proto

package syncv1grpc

import (
	v1 "buf.build/gen/go/open-feature/flagd/protocolbuffers/go/flagd/sync/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlagSyncService_SyncFlags_FullMethodName     = "/flagd.sync.v1.FlagSyncService/SyncFlags"
	FlagSyncService_FetchAllFlags_FullMethodName = "/flagd.sync.v1.FlagSyncService/FetchAllFlags"
	FlagSyncService_GetMetadata_FullMethodName   = "/flagd.sync.v1.FlagSyncService/GetMetadata"
)

// FlagSyncServiceClient is the client API for FlagSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FlagService implements a server streaming to provide realtime flag configurations
type FlagSyncServiceClient interface {
	SyncFlags(ctx context.Context, in *v1.SyncFlagsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.SyncFlagsResponse], error)
	FetchAllFlags(ctx context.Context, in *v1.FetchAllFlagsRequest, opts ...grpc.CallOption) (*v1.FetchAllFlagsResponse, error)
	GetMetadata(ctx context.Context, in *v1.GetMetadataRequest, opts ...grpc.CallOption) (*v1.GetMetadataResponse, error)
}

type flagSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagSyncServiceClient(cc grpc.ClientConnInterface) FlagSyncServiceClient {
	return &flagSyncServiceClient{cc}
}

func (c *flagSyncServiceClient) SyncFlags(ctx context.Context, in *v1.SyncFlagsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.SyncFlagsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FlagSyncService_ServiceDesc.Streams[0], FlagSyncService_SyncFlags_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.SyncFlagsRequest, v1.SyncFlagsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FlagSyncService_SyncFlagsClient = grpc.ServerStreamingClient[v1.SyncFlagsResponse]

func (c *flagSyncServiceClient) FetchAllFlags(ctx context.Context, in *v1.FetchAllFlagsRequest, opts ...grpc.CallOption) (*v1.FetchAllFlagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.FetchAllFlagsResponse)
	err := c.cc.Invoke(ctx, FlagSyncService_FetchAllFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagSyncServiceClient) GetMetadata(ctx context.Context, in *v1.GetMetadataRequest, opts ...grpc.CallOption) (*v1.GetMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetMetadataResponse)
	err := c.cc.Invoke(ctx, FlagSyncService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlagSyncServiceServer is the server API for FlagSyncService service.
// All implementations should embed UnimplementedFlagSyncServiceServer
// for forward compatibility.
//
// FlagService implements a server streaming to provide realtime flag configurations
type FlagSyncServiceServer interface {
	SyncFlags(*v1.SyncFlagsRequest, grpc.ServerStreamingServer[v1.SyncFlagsResponse]) error
	FetchAllFlags(context.Context, *v1.FetchAllFlagsRequest) (*v1.FetchAllFlagsResponse, error)
	GetMetadata(context.Context, *v1.GetMetadataRequest) (*v1.GetMetadataResponse, error)
}

// UnimplementedFlagSyncServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlagSyncServiceServer struct{}

func (UnimplementedFlagSyncServiceServer) SyncFlags(*v1.SyncFlagsRequest, grpc.ServerStreamingServer[v1.SyncFlagsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SyncFlags not implemented")
}
func (UnimplementedFlagSyncServiceServer) FetchAllFlags(context.Context, *v1.FetchAllFlagsRequest) (*v1.FetchAllFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllFlags not implemented")
}
func (UnimplementedFlagSyncServiceServer) GetMetadata(context.Context, *v1.GetMetadataRequest) (*v1.GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedFlagSyncServiceServer) testEmbeddedByValue() {}

// UnsafeFlagSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlagSyncServiceServer will
// result in compilation errors.
type UnsafeFlagSyncServiceServer interface {
	mustEmbedUnimplementedFlagSyncServiceServer()
}

func RegisterFlagSyncServiceServer(s grpc.ServiceRegistrar, srv FlagSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlagSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlagSyncService_ServiceDesc, srv)
}

func _FlagSyncService_SyncFlags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.SyncFlagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlagSyncServiceServer).SyncFlags(m, &grpc.GenericServerStream[v1.SyncFlagsRequest, v1.SyncFlagsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FlagSyncService_SyncFlagsServer = grpc.ServerStreamingServer[v1.SyncFlagsResponse]

func _FlagSyncService_FetchAllFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.FetchAllFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagSyncServiceServer).FetchAllFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlagSyncService_FetchAllFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagSyncServiceServer).FetchAllFlags(ctx, req.(*v1.FetchAllFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlagSyncService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagSyncServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlagSyncService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagSyncServiceServer).GetMetadata(ctx, req.(*v1.GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlagSyncService_ServiceDesc is the grpc.ServiceDesc for FlagSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlagSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flagd.sync.v1.FlagSyncService",
	HandlerType: (*FlagSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAllFlags",
			Handler:    _FlagSyncService_FetchAllFlags_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _FlagSyncService_GetMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncFlags",
			Handler:       _FlagSyncService_SyncFlags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flagd/sync/v1/sync.proto",
}
