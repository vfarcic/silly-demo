//*
// Flag definition sync API
//
// This proto defines a simple API to synchronize a feature flag definition.
// It supports establishing a stream for getting notifications about changes in a flag definition.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: flagd/sync/v1/sync.proto

//go:build !protoopaque

package syncv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SyncFlagsRequest is the request initiating the server-streaming rpc.
// Implementations of Flagd providers and Flagd itself send this request, acting as the client.
type SyncFlagsRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Optional: A unique identifier for flagd(grpc client) initiating the request. The server implementations may
	// utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
	// flag configurations that it can expose to this request. This field is intended to be optional. However server
	// implementations may enforce it.
	//
	//	ex:- provider_id: flagd-weatherapp-sidecar
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// Optional: A selector for the flag configuration request. The server implementation may utilize this to select
	// flag configurations from a collection, select the source of the flag or combine this to any desired underlying
	// filtering mechanism.
	//
	//	ex:- selector: 'source=database,app=weatherapp'
	Selector      string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncFlagsRequest) Reset() {
	*x = SyncFlagsRequest{}
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFlagsRequest) ProtoMessage() {}

func (x *SyncFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SyncFlagsRequest) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *SyncFlagsRequest) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *SyncFlagsRequest) SetProviderId(v string) {
	x.ProviderId = v
}

func (x *SyncFlagsRequest) SetSelector(v string) {
	x.Selector = v
}

type SyncFlagsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Optional: A unique identifier for flagd(grpc client) initiating the request. The server implementations may
	// utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
	// flag configurations that it can expose to this request. This field is intended to be optional. However server
	// implementations may enforce it.
	//
	//	ex:- provider_id: flagd-weatherapp-sidecar
	ProviderId string
	// Optional: A selector for the flag configuration request. The server implementation may utilize this to select
	// flag configurations from a collection, select the source of the flag or combine this to any desired underlying
	// filtering mechanism.
	//
	//	ex:- selector: 'source=database,app=weatherapp'
	Selector string
}

func (b0 SyncFlagsRequest_builder) Build() *SyncFlagsRequest {
	m0 := &SyncFlagsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.ProviderId = b.ProviderId
	x.Selector = b.Selector
	return m0
}

// SyncFlagsResponse is the server response containing feature flag configurations and the state
type SyncFlagsResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
	FlagConfiguration string `protobuf:"bytes,1,opt,name=flag_configuration,json=flagConfiguration,proto3" json:"flag_configuration,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SyncFlagsResponse) Reset() {
	*x = SyncFlagsResponse{}
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFlagsResponse) ProtoMessage() {}

func (x *SyncFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SyncFlagsResponse) GetFlagConfiguration() string {
	if x != nil {
		return x.FlagConfiguration
	}
	return ""
}

func (x *SyncFlagsResponse) SetFlagConfiguration(v string) {
	x.FlagConfiguration = v
}

type SyncFlagsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
	FlagConfiguration string
}

func (b0 SyncFlagsResponse_builder) Build() *SyncFlagsResponse {
	m0 := &SyncFlagsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.FlagConfiguration = b.FlagConfiguration
	return m0
}

// FetchAllFlagsRequest is the request to fetch all flags. Clients send this request as the client in order to resync their internal state
type FetchAllFlagsRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Optional: A unique identifier for clients initiating the request. The server implementations may
	// utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
	// flag configurations that it can expose to this request. This field is intended to be optional. However server
	// implementations may enforce it.
	//
	//	ex:- provider_id: flagd-weatherapp-sidecar
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// Optional: A selector for the flag configuration request. The server implementation may utilize this to select
	// flag configurations from a collection, select the source of the flag or combine this to any desired underlying
	// filtering mechanism.
	//
	//	ex:- selector: 'source=database,app=weatherapp'
	Selector      string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAllFlagsRequest) Reset() {
	*x = FetchAllFlagsRequest{}
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAllFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllFlagsRequest) ProtoMessage() {}

func (x *FetchAllFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FetchAllFlagsRequest) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *FetchAllFlagsRequest) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *FetchAllFlagsRequest) SetProviderId(v string) {
	x.ProviderId = v
}

func (x *FetchAllFlagsRequest) SetSelector(v string) {
	x.Selector = v
}

type FetchAllFlagsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Optional: A unique identifier for clients initiating the request. The server implementations may
	// utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
	// flag configurations that it can expose to this request. This field is intended to be optional. However server
	// implementations may enforce it.
	//
	//	ex:- provider_id: flagd-weatherapp-sidecar
	ProviderId string
	// Optional: A selector for the flag configuration request. The server implementation may utilize this to select
	// flag configurations from a collection, select the source of the flag or combine this to any desired underlying
	// filtering mechanism.
	//
	//	ex:- selector: 'source=database,app=weatherapp'
	Selector string
}

func (b0 FetchAllFlagsRequest_builder) Build() *FetchAllFlagsRequest {
	m0 := &FetchAllFlagsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.ProviderId = b.ProviderId
	x.Selector = b.Selector
	return m0
}

// FetchAllFlagsResponse is the server response containing feature flag configurations
type FetchAllFlagsResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
	FlagConfiguration string `protobuf:"bytes,1,opt,name=flag_configuration,json=flagConfiguration,proto3" json:"flag_configuration,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FetchAllFlagsResponse) Reset() {
	*x = FetchAllFlagsResponse{}
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAllFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllFlagsResponse) ProtoMessage() {}

func (x *FetchAllFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FetchAllFlagsResponse) GetFlagConfiguration() string {
	if x != nil {
		return x.FlagConfiguration
	}
	return ""
}

func (x *FetchAllFlagsResponse) SetFlagConfiguration(v string) {
	x.FlagConfiguration = v
}

type FetchAllFlagsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
	FlagConfiguration string
}

func (b0 FetchAllFlagsResponse_builder) Build() *FetchAllFlagsResponse {
	m0 := &FetchAllFlagsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.FlagConfiguration = b.FlagConfiguration
	return m0
}

// GetMetadataRequest is the request for retrieving metadata from the sync service
type GetMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMetadataRequest) Reset() {
	*x = GetMetadataRequest{}
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataRequest) ProtoMessage() {}

func (x *GetMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type GetMetadataRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 GetMetadataRequest_builder) Build() *GetMetadataRequest {
	m0 := &GetMetadataRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// GetMetadataResponse contains metadata from the sync service
type GetMetadataResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Metadata      *structpb.Struct       `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMetadataResponse) Reset() {
	*x = GetMetadataResponse{}
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataResponse) ProtoMessage() {}

func (x *GetMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flagd_sync_v1_sync_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetMetadataResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetMetadataResponse) SetMetadata(v *structpb.Struct) {
	x.Metadata = v
}

func (x *GetMetadataResponse) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *GetMetadataResponse) ClearMetadata() {
	x.Metadata = nil
}

type GetMetadataResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Metadata *structpb.Struct
}

func (b0 GetMetadataResponse_builder) Build() *GetMetadataResponse {
	m0 := &GetMetadataResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Metadata = b.Metadata
	return m0
}

var File_flagd_sync_v1_sync_proto protoreflect.FileDescriptor

var file_flagd_sync_v1_sync_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x66, 0x6c, 0x61, 0x67, 0x64, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x66, 0x6c, 0x61, 0x67,
	0x64, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x42, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6c, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x14,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x46, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x6c,
	0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x32, 0x9b, 0x02, 0x0a, 0x0f, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1f, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x64, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x64, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0d, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x61,
	0x67, 0x64, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x64, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x64, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x61, 0x67,
	0x64, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0xe6, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5a, 0x4b, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x61, 0x67,
	0x64, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x79, 0x6e, 0x63, 0x76, 0x31,
	0xaa, 0x02, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x64, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0xca, 0x02,
	0x2c, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x5c, 0x46, 0x6c, 0x61, 0x67, 0x64, 0x5c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5c, 0x47, 0x72, 0x70, 0x63, 0x5c, 0x53, 0x79, 0x6e, 0x63, 0xea, 0x02, 0x28,
	0x4f, 0x70, 0x65, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x46, 0x6c, 0x61,
	0x67, 0x64, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x47, 0x72,
	0x70, 0x63, 0x3a, 0x3a, 0x53, 0x79, 0x6e, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_flagd_sync_v1_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_flagd_sync_v1_sync_proto_goTypes = []any{
	(*SyncFlagsRequest)(nil),      // 0: flagd.sync.v1.SyncFlagsRequest
	(*SyncFlagsResponse)(nil),     // 1: flagd.sync.v1.SyncFlagsResponse
	(*FetchAllFlagsRequest)(nil),  // 2: flagd.sync.v1.FetchAllFlagsRequest
	(*FetchAllFlagsResponse)(nil), // 3: flagd.sync.v1.FetchAllFlagsResponse
	(*GetMetadataRequest)(nil),    // 4: flagd.sync.v1.GetMetadataRequest
	(*GetMetadataResponse)(nil),   // 5: flagd.sync.v1.GetMetadataResponse
	(*structpb.Struct)(nil),       // 6: google.protobuf.Struct
}
var file_flagd_sync_v1_sync_proto_depIdxs = []int32{
	6, // 0: flagd.sync.v1.GetMetadataResponse.metadata:type_name -> google.protobuf.Struct
	0, // 1: flagd.sync.v1.FlagSyncService.SyncFlags:input_type -> flagd.sync.v1.SyncFlagsRequest
	2, // 2: flagd.sync.v1.FlagSyncService.FetchAllFlags:input_type -> flagd.sync.v1.FetchAllFlagsRequest
	4, // 3: flagd.sync.v1.FlagSyncService.GetMetadata:input_type -> flagd.sync.v1.GetMetadataRequest
	1, // 4: flagd.sync.v1.FlagSyncService.SyncFlags:output_type -> flagd.sync.v1.SyncFlagsResponse
	3, // 5: flagd.sync.v1.FlagSyncService.FetchAllFlags:output_type -> flagd.sync.v1.FetchAllFlagsResponse
	5, // 6: flagd.sync.v1.FlagSyncService.GetMetadata:output_type -> flagd.sync.v1.GetMetadataResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_flagd_sync_v1_sync_proto_init() }
func file_flagd_sync_v1_sync_proto_init() {
	if File_flagd_sync_v1_sync_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_flagd_sync_v1_sync_proto_rawDesc), len(file_flagd_sync_v1_sync_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flagd_sync_v1_sync_proto_goTypes,
		DependencyIndexes: file_flagd_sync_v1_sync_proto_depIdxs,
		MessageInfos:      file_flagd_sync_v1_sync_proto_msgTypes,
	}.Build()
	File_flagd_sync_v1_sync_proto = out.File
	file_flagd_sync_v1_sync_proto_goTypes = nil
	file_flagd_sync_v1_sync_proto_depIdxs = nil
}
